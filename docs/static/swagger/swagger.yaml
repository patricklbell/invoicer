openapi: 3.0.3
info:
  title: eInvoice Storage - OpenAPI 3.0
  description: |-
    A description of the Invoicer REST API
  contact:
    email: patricklachlanbell@gmail.com
  version: 1.0.1
externalDocs:
  description: Documentation with quick start guides
  url: /docs
tags:
  - name: invoice
    description: CRUD Operations on individual invoices
  - name: invoices
    description: Access and Edit multiple invoices
  - name: user
    description: CRUD Operations on individual users and login
  - name: users
    description: Operations across multiple users
servers:
  - url: http://<deployment-url>
    description: Production server (uses live data and can be viewed on frontend)
paths:
  /invoice:
    post:
      tags:
        - invoice
      summary: Create a new invoice
      description: Uses the provided metadata and contents to create a new invoice for the authenticated user. Returns the new invoices id.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - documentTitle
                - totalInvoiceValue
                - supplierName
                - recipientName
                - contentsXml
                - jsonXml
              description: Only one of contentsXml and jsonXml is required. The one which is missing will be generated from the other.
              properties:
                contentsXml:
                  example: "<Invoice></Invoice>"
                  type: string
                  minLength: 1
                contentsJson:
                  type: string
                  minLength: 1
                documentTitle:
                  example: "Example"
                  type: string
                totalInvoiceValue:
                  example: 1000
                  description: Currency is assumed to be AUD.
                  type: number
                supplierName:
                  example: ""
                  type: string
                recipientName:
                  example: "Company A LLC"
                  type: string
      responses:
        '200':
          description: Successfully inserted an invoice
          content:
            application/json:
              schema:
                type: object
                required:
                  - acknowledged
                  - insertedId
                properties:
                  acknowledged:
                    type: boolean
                  insertedId:
                    type: string
                    minLength: 24
                    maxLength: 24
                    example: "6421d1e887d1e2174b494492"
        '400':
          $ref: '#/components/responses/InvalidError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
      security:
        - bearerAuth: []
  /invoice/{id}:
    get:
      tags:
        - invoice
      summary: Retrieve the invoice with the specified id.
      description: The specified id is searched for. If it is found and the authorizing user can view the invoice, the contents and metadata are returned.
      parameters:
        - name: id
          in: path
          description: The objectId of the invoice to be retrieved.
          required: true
          schema:
            type: string
            minLength: 24
            maxLength: 24
            example: "6421d1e887d1e2174b494492"
      responses:
        '200':
          description: Found a viewable invoice with the given id.
          content:
            application/json:
              schema:
                type: object
                required:
                  - found
                properties:
                  found:
                    type: boolean
                    example: true
                  invoice:
                    $ref: '#/components/schemas/Invoice'
        '400':
          $ref: '#/components/responses/InvalidError'
        '404':
          description: No invoice with the id was found or user is not authorized to view this invoice.
          content:
            application/json:
              schema:
                type: object
                required:
                  - found
                properties:
                  found:
                    type: boolean
                    example: false
        '500':
          description: Internal server error
      security:
        - bearerAuth:
            - read:invoice
    delete:
      tags:
        - invoice
      summary: Delete the invoice with the specified id.
      description: The invoice with the given id is deleted if it is found and the authorizing user has edit permissions.
      parameters:
        - name: id
          in: path
          description: The objectId of invoice to be deleted.
          required: true
          schema:
            type: string
            minLength: 24
            maxLength: 24
            example: "6421d1e887d1e2174b494492"
      responses:
        '200':
          description: Invoice was found and deleted.
          content:
            application/json:
              schema:
                type: object
                required:
                  - deletedCount
                  - acknowledged
                properties:
                  acknowledged:
                    type: boolean
                    example: true
                  deletedCount:
                    type: integer
                    example: 1
        '400':
          $ref: '#/components/responses/InvalidError'
        '404':
          description: An invoice with id doesn't exist or user is not authorized to delete it.
          content:
            application/json:
              schema:
                type: object
                required:
                  - acknowledged
                  - deletedCount
                properties:
                  acknowledged: 
                    type: boolean
                    example: true
                  deletedCount:
                    type: integer
                    example: 0
        '500':
          description: Internal server error
      security:
        - bearerAuth:
            - edit:invoice
    patch:
      tags:
        - invoice
      summary: Modify the invoice with the specified id.
      description: An invoice with the specified id is searched for and if it is found the contents are modified according to the request body. All fields in the body must be valid possible properties of an invoice.
      parameters:
        - name: id
          in: path
          description: objectId of invoice to be modified.
          required: true
          schema:
            type: string
            minLength: 24
            maxLength: 24
            example: "6421d1e887d1e2174b494492"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
        required: false
      responses:
        '200':
          description: The invoice with the given id was successfully modified.
          content:
            application/json:
              schema:
                type: object
                required:
                  - acknowledged
                properties:
                  aknowledged:
                    type: boolean
                    example: true
                  matchedCount:
                    type: integer
                    example: 1
        '400':
          $ref: '#/components/responses/InvalidError'
        '404':
          description: An invoice with the given id doesn't exist or the user is not authorized to edit it.
          content:
            application/json:
              schema:
                type: object
                required:
                  - acknowledged
                properties:
                  aknowledged:
                    type: boolean
                    example: true
                  matchedCount:
                    type: integer
                    example: 0
        '500':
          description: Internal server error
      security:
        - bearerAuth:
            - read:invoice
  /invoice/view/{id}:
    get:
      tags:
        - invoice
      summary: View an invoice.
      description: Returns a HTML page which shows the details of an invoice stored in the database.
      parameters:
        - name: id
          in: path
          description: The objectId of the invoice to be viewed.
          required: true
          schema:
            type: string
            minLength: 24
            maxLength: 24
            example: "6421d1e887d1e2174b494492"
      responses:
        '200':
          description: Generated HTML for the invoice.
          content:
            application/json:
              schema:
                type: object
                required:
                  - found
                  - html
                properties:
                  found:
                    type: boolean
                    example: true
                  html:
                    type: string
                    example: "<html>Invoice</html>"
                    description: Generated HTML from the invoice's XML or JSON representation. This expects the data to be formatted according to the PEPPOL regulations. JSON should be a direct transposition of this PEPPOL structure, for reference, we use fast-xml-parser with ingnoreAttributes off, and implicitly expect the JSON to follow the output of this parser.
        '404':
          description: The invoice was not found or the authenticating user does not have view permissions.
          content:
            application/json:
              schema:
                type: object
                required:
                  - found
                properties:
                  found:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "No matching invoice found"
        '400':
          $ref: '#/components/responses/InvalidError'
        '500':
          description: Internal server error.
      security:
        - bearerAuth:
          - view:invoice
  /invoice/view:
    post:
      tags:
        - invoice
      summary: View an invoice.
      description: Returns a HTML page which shows the details of an invoice from it's XML or JSON contents.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: One of contentsXml or contentsJson is required. If both are provided, the JSON is used.
              properties:
                contentsXml:
                  type: string
                  description: For the expected document schema check the PEPPOL standard. An example of a valid XML string is shown here https://github.com/A-NZ-PEPPOL/A-NZ-PEPPOL-BIS-3.0/blob/master/Message%20examples/AU%20Freight%20-%20Document%20Level.xml
                contentsJson:
                  type: string
                  description: The JSON form of a PEPPOL standard XML, the JSON structure should directly follows the XML. For reference, we use fast-xml-parser with ingnoreAttributes off to convert from the XML, and implicitly expect the JSON to follow the output of this parser.
        required: true
      responses:
        '200':
          description: Generated HTML for the invoice.
          content:
            application/json:
              schema:
                type: object
                required:
                  - found
                  - html
                properties:
                  found:
                    type: boolean
                    example: true
                  html:
                    type: string
                    example: "<html>Invoice</html>"
                    description: Generated HTML from the invoice's XML or JSON representation.
        '400':
          $ref: '#/components/responses/InvalidError'
        '500':
          description: Internal server error.
  /invoice/send/{id}:
    post:
      tags:
        - invoice
      summary: Send an email containing an invoice.
      description: Sends an email to a list of provided recipients providing information about an invoice.
      parameters:
        - name: id
          in: path
          description: The objectId of the invoice to be sent.
          required: true
          schema:
            type: string
            minLength: 24
            maxLength: 24
            example: "6421d1e887d1e2174b494492"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - recipients
              properties:
                recipients:
                  type: array
                  description: A list of emails addresses which will receive the email.
                  example: ["johndoe@example.com"]
                  items:
                    type: string
                    example: "johndoe@example.com"
                    description: Must be a correctly formatted email address.
        required: true
      responses:
        '200':
          description: Email was succesfully sent. Note that this does not mean the email will show up in the recipient's inbox. The email may take a long time to arrive, may be reported as spam, or even blocked entirely.
          content:
            application/json:
              schema:
                type: object
                required:
                  - sent
                properties:
                  found:
                    type: boolean
                    example: true
        '404':
          description: The invoice was not found or the authenticating user does not have view permissions.
          content:
            application/json:
              schema:
                type: object
                required:
                  - sent
                properties:
                  sent:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "No matching invoice found"
        '400':
          $ref: '#/components/responses/InvalidError'
        '500':
          description: Internal server error.
      security:
        - bearerAuth:
          - view:invoice
  /invoices/feed:
    get:
      tags:
        - invoices
      summary: Gets a page of the users invoices.
      description: Paginated feed of the the invoices a user has permission to view. The feed is in sorted from newest to oldest (in future there will be a sort parameter).
      parameters:
        - in: query
          name: page
          description: Zero indexed number representing which page of results to return, each page is of length 'limit.' The first invoice is invoice number 'page' x 'limit.'
          schema:
            type: number
            minimum: 0
            example: 0
        - in: query
          name: offset
          description: The number of invoices to offset the page by, this does not affect how many invoices are returned.
          schema:
            type: number
            minimum: 0
            example: 0
        - in: query
          name: limit
          description: The size of each page, i.e. the maximum number of invoices which are returned.
          schema:
            type: number
            default: 10
            maximum: 100
            minimum: 1
            example: 20
      responses:
        '200':
          description: An object respresenting the specified page of invoices and how many invoices are left in the feed. There can be less than 'limit' invoices in 'page'.
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                  - total
                properties:
                  page:
                    type: array
                    items:
                      $ref: '#/components/schemas/Invoice'
                  total:
                    type: integer
                    description: The total number of invoices in the feed.
                    example: 100
        '400':
          $ref: '#/components/responses/InvalidError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
      security:
        - bearerAuth:
          - view:invoice
  /invoices/search:
    get:
      tags:
        - invoices
      summary: Gets a page of invoices which match the provided query.
      description: Paginated results from a fuzzy search from the invoices the user has permission to view. The results are sorted from newest to oldest (in future there will be a sort parameter).
      parameters:
        - in: query
          name: query
          description: A fuzzy search term which determines which invoices are returned.
          schema:
            type: string
            example: Company A LLC.
        - in: query
          name: page
          description: Zero indexed number representing which page of results to return, each page is of length 'limit.' The first invoice is invoice number 'page' x 'limit.'
          schema:
            type: number
            minimum: 0
            example: 0
        - in: query
          name: offset
          description: The number of invoices to offset the page by, this does not affect how many invoices are returned.
          schema:
            type: number
            minimum: 0
            example: 0
        - in: query
          name: limit
          description: The size of each page, i.e. the maximum number of invoices which are returned.
          schema:
            type: number
            default: 10
            maximum: 100
            minimum: 1
            example: 20
      responses:
        '200':
          description: Paginated invoices which match with the query and are viewable by the authorizing user.
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                  - total
                properties:
                  page:
                    $ref: '#/components/schemas/Invoice'
                  total:
                    type: integer
                    description: The total number of invoices matching the query which the authorizing user can view.
                    example: 100
        '400':
          $ref: '#/components/responses/InvalidError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
      security:
        - bearerAuth: []
  /invoices/batch:
    post:
      tags:
        - invoices
      summary: Applies an operation to a batch of invoices.
      description: Given a list of invoice ids and an operation, this operation is performed on all invoices which the authorizing user has edit permissions for. Currently the only supported operation is deletion.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
                - operation
              properties:
                ids:
                  type: array
                  description: Array of the objectIds of the invoices to perform the operation on.
                  example: ["6421d1e887d1e2174b494492"]
                  items:
                    type: string
                    example: "6421d1e887d1e2174b494492"
                operation:
                  type: string
                  description: A string reprenting the operation to perform.
                  enum:
                    - "delete"
                  example: "delete"
        required: true
        
      responses:
        '200':
          description: Acknowledgement and how many invoices the operation was applied to.
          content:
            application/json:
              schema:
                type: object
                required:
                  - acknowledged
                properties:
                  aknowledged:
                    type: boolean
                    example: true
                  deletedCount:
                    type: integer
                    description: If the operation is 'delete' then a delete count is returned. This is tells the caller how many of 'ids' were valid.
                    example: 1
        '400':
          $ref: '#/components/responses/InvalidError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
      security:
        - bearerAuth: []
        
        
  /user/signup:
    post:
      tags:
        - user
      summary: Sign up for a new account.
      description: Creates a new account with the given details.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - firstname
                - lastname
                - email
              properties:
                username:
                  type: string
                  example: "johndoe"
                firstname:
                  type: string
                  example: "John"
                lastname:
                  type: string
                  example: "Doe"
                password:
                  type: string
                  description: If you are not using HTTPS ensure this password can not be intercepted!
                  example: "XM92eJEFHFTt214v2eetG4"
                email:
                  type: string
                  description: Must be valid format for an email.
                  example: johndoe@example.com
        required: true
      responses:
        '200':
          description: Details of account which was created.
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - user
                properties:
                  message:
                    type: string
                    example: "Signup successful"
                  user:
                    type: object
                    required:
                      - username
                      - _id
                    properties:
                      username:
                        type: string
                        example: "johndoe"
                      _id:
                        type: string
                        description: objectId of new user
                        example: "64226af987d1e2174b494491"
        '400':
          $ref: '#/components/responses/InvalidError'
        '500':
          description: Internal server error
  /user/login:
    post:
      tags:
        - user
      summary: Login to an existing user's account.
      description: Checks that the user with the given username has a matching password then returns a JWT authorization token for a new session.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                api:
                  type: boolean
                  example: true
                  description: Token will never expire if api is true.
                username:
                  type: string
                  example: "johndoe"
                password:
                  description: If you are not using HTTPS ensure this password can not be intercepted!
                  type: string
                  example: "XM92eJEFHFTt214v2eetG4"
        required: true
      responses:
        '200':
          description: Details of newly authenticated session.
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - token
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjQyMTQwMzU4N2QxZTIxNzRiNDk0NDhkIiwidXNlcm5hbWUiOiJwYXRyaWNrIn0sImlhdCI6MTY4MDI2NTE2NiwiZXhwIjoxNjgwMjY4NzY2fQ.ecnLCgXQ-JufzFXK7RYl23bQehT3cakZj7Tmd7pwd8A"
                    description: JSON Web Token, add this to headers as a bearer token to authorize future requests. This will expire after a certain time.
        '400':
          $ref: '#/components/responses/InvalidError'
        '401':
          description: Message describing why the user was not authenticated.
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    example: "Incorrect username or password"
        '500':
          description: Internal server error
  /user/{id}:
    get:
      tags:
        - user
      summary: Retrieve a user with the specified id or the authenticating user.
      description: The specified user id or authenticating user's id is searched and if it is found a description of the user is returned. Does not require authorization, but if authorized the user information returned could be more detailed.
      parameters:
        - in: path
          name: id
          description: objectId of the user to be retrieved. If not provided then request must be authenticated and the authenticating user's id is used.
          required: false
          schema:
            type: string
            minLength: 24
            maxLength: 24
            example: "6421d1e887d1e2174b494492"
      responses:
        '200':
          description: User details, depending on the authorization a different amount of information is exposed.
          content:
            application/json:
              schema:
                type: object
                description: If the authorizing user's id does not have permission then only 'firstname', 'lastname', 'username' and 'dateCreated' is sent in 'user'.
                required:
                  - found
                  - user
                properties:
                  found:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/InvalidError'
        '404':
          description: Acknowledgement that no user with the specified id exists.
          content:
            application/json:
              schema:
                type: object
                required:
                  - found
                properties:
                  found:
                    type: boolean
                    example: false
        '500':
          description: Internal server error
      security:
        - bearerAuth:
            - read:user
    patch:
      tags:
          - user
      summary: Change the user with the specified id or the authenticating user's details.
      description: The user with specified id or authenticating user is modified according to body of request.
      parameters:
        - name: id
          in: path
          description: objectId of the user to be retrieved. If not provided then request must be authenticated and the authenticating user's id is used.
          required: false
          schema:
            type: string
            minLength: 24
            maxLength: 24
            example: "6421d1e887d1e2174b494492"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "janedoe"
                firstname:
                  type: string
                  example: "Jane"
                lastname:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  description: Must be valid format for an email.
                  example: janedoe@example.com
        required: false
      responses:
        '200':
          description: The user with the given id was successfully modified.
          content:
            application/json:
              schema:
                type: object
                required:
                  - acknowledged
                properties:
                  aknowledged:
                    type: boolean
                    example: true
                  matchedCount:
                    type: integer
                    example: 1
        '400':
          $ref: '#/components/responses/InvalidError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: A user with the given id doesn't exist.
          content:
            application/json:
              schema:
                type: object
                required:
                  - acknowledged
                properties:
                  aknowledged:
                    type: boolean
                    example: true
                  matchedCount:
                    type: integer
                    example: 0
        '500':
          description: Internal server error
      security:
        - bearerAuth:
            - edit:user
    delete:
      tags:
        - user
      summary: Delete the user with the specified id or the authenticating user.
      description: Delete the user with the specified id or the authenticating user if the authorizing user has permission.
      parameters:
        - name: id
          in: path
          description: objectId of the user to be deleted. If not provided then request must be authenticated and the authenticating user's id is used.
          required: false
          schema:
            type: string
            minLength: 24
            maxLength: 24
            example: "6421d1e887d1e2174b494492"
      responses:
        '200':
          description: User was found and deleted.
          content:
            application/json:
              schema:
                type: object
                required:
                  - deletedCount
                  - acknowledged
                properties:
                  acknowledged:
                    type: boolean
                    example: true
                  deletedCount:
                    type: integer
                    example: 1
        '400':
          $ref: '#/components/responses/InvalidError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: A user with id doesn't exist or user is not authorized to delete it.
          content:
            application/json:
              schema:
                type: object
                required:
                  - deletedCount
                  - acknowledged
                properties:
                  acknowledged:
                    type: boolean
                    example: true
                  deletedCount:
                    type: integer
                    example: 0
        '500':
          description: Internal server error
      security:
        - bearerAuth:
            - write:user
  /users/search:
    get:
      tags:
        - users
      summary: Gets a page of users which match the provided query.
      description: Paginated results from a fuzzy search of all users. The results are sorted from newest to oldest (in future there will be a sort parameter).
      parameters:
        - in: query
          name: query
          description: A fuzzy search term which determines which users are returned.
          schema:
            type: string
            example: Patrick
        - in: query
          name: page
          description: Zero indexed number representing which page of results to return, each page is of length 'limit.' The first invoice is invoice number 'page' x 'limit.'
          schema:
            type: number
            minimum: 0
            example: 0
        - in: query
          name: offset
          description: The number of users to offset the page by, this does not affect how many users are returned.
          schema:
            type: number
            minimum: 0
            example: 0
        - in: query
          name: limit
          description: The size of each page, i.e. the maximum number of users which are returned.
          schema:
            type: number
            default: 10
            maximum: 100
            minimum: 1
            example: 20
      responses:
        '200':
          description: Paginated users which match with the query.
          content:
            application/json:
              schema:
                type: object
                required:
                  - page
                  - total
                properties:
                  page:
                    type: object
                    required:
                      - username
                      - firstname
                      - lastname
                    properties:
                      username:
                        type: string
                        example: "johndoe"
                      firstname:
                        type: string
                        example: "John"
                      lastname:
                        type: string
                        example: "Doe"
                  total:
                    type: integer
                    description: The total number of matching users matching the query.
                    example: 100
        '400':
          $ref: '#/components/responses/InvalidError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
components:
  schemas:
    User:
      type: object
      required:
        - username
        - firstname
        - lastname
        - email
        - hash
        - salt
        - creationDate
      properties:
        username:
          type: string
          example: "johndoe"
        firstname:
          type: string
          example: "John"
        lastname:
          type: string
          example: "Doe"
        email:
          type: string
          description: Must be valid format for an email.
          example: johndoe@example.com
        hash:
          type: string
          description: Salted hash based on the user's password
          example: "p7D6jYqPs6x3mL2CBH11Jt4sHOg72MjCNc0QtAwrujB="
        salt:
          type: string
          description: The salt used to hash the password
          example: "u14rCPA1gV3K6ghnr6HoOQ=="
        creationDate:
          example: "1975-08-19T23:15:30.000Z"
          description: Serialized JS Date object, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON
          type: string
    Invoice:
      type: object
      required:
        - documentTitle
        - totalInvoiceValue
        - supplierName
        - recipientName
        - viewIds
        - editIds
        - creationTime
        - creatorId
      properties:
        contentsXml:
          example: "<Invoice></Invoice>"
          type: string
          minLength: 1
        contentsJson:
          type: string
          minLength: 1
        documentTitle:
          example: "Example"
          type: string
        totalInvoiceValue:
          example: 1000
          description: Currency is assumed to be AUD.
          type: number
        supplierName:
          example: "Company A LLC"
          type: string
        recipientName:
          example: "Company B LLC"
          type: string
        viewIds:
          example: ["6421d1e887d1e2174b494492"]
          type: array
          items:
            type: string
        editIds:
          example: ["6421d1e887d1e2174b494492"]
          type: array
          items:
            type: string
        creationTime:
          example: "1975-08-19T23:15:30.000Z"
          description: Serialized JS Date object, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON
          type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid, possibly because it has expired.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
    InvalidError:
      description: Parameters don't match the schema (validated with [YUP](https://www.npmjs.com/package/yup)) or an internal server error was encountered.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: An optional message describing the error
                example: "field body.recipientName missing"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
